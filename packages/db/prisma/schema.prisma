generator client {
  provider     = "prisma-kysely"
  output       = "."
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  relationMode = "prisma"
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
}

model Customer {
  id                     Int               @id @default(autoincrement())
  authUserId             String
  name                   String?
  plan                   SubscriptionPlan?
  stripeCustomerId       String?           @unique
  stripeSubscriptionId   String?           @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now())

  @@index([authUserId])
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model K8sClusterConfig {
  id         Int               @id @default(autoincrement())
  name       String
  location   String
  authUserId String
  plan       SubscriptionPlan? @default(FREE)
  network    String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now())
  status     Status?           @default(PENDING)
  delete     Boolean?          @default(false)

  // @@unique([plan, authUserId])
  @@index([authUserId])
}

enum Status {
  PENDING
  CREATING
  INITING
  RUNNING
  STOPPED
  DELETED
}

enum AnalysisStatus {
  PENDING       // 等待处理
  PROCESSING    // 正在处理
  COMPLETED     // 已完成
  FAILED        // 失败
}

enum WorkflowType {
  FEATURE_MATRIX  // 竞品功能矩阵
  REDDIT_SEARCH   // Reddit 搜索
}

// 通用的异步任务表 - 支持竞品分析、Reddit 搜索等
model AsyncAnalysisTask {
  id            Int            @id @default(autoincrement())
  projectId     Int            // 项目 ID
  authUserId    String         // 用户 ID
  workflowType  WorkflowType   // 工作流类型
  status        AnalysisStatus @default(PENDING)

  // 输入数据
  inputData     Json           // 存储输入参数 (竞品信息/搜索关键词等)

  // 中间结果
  discoveredUrls Json?         // 工作流1 发现的 URLs

  // 最终结果
  result        Json?          // 工作流2 返回的分析结果

  // 元数据
  n8nExecutionId String?       // N8N 执行 ID
  errorMessage   String?       // 错误信息

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  completedAt   DateTime?      // 完成时间

  @@index([projectId])
  @@index([authUserId])
  @@index([status])
}
